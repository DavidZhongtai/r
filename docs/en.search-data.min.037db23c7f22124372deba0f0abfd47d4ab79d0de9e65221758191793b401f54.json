[{"id":0,"href":"/docs/plots/basics/","title":"Basic Plotting","section":"Plotting and Visualization","content":" Basic Plotting # "},{"id":1,"href":"/docs/rmarkdown/installrmd/","title":"Installing R Markdown","section":"R Markdown","content":" Installing R Markdown # "},{"id":2,"href":"/docs/rmarkdown/basicrmd/","title":"Intro to R Markdown","section":"R Markdown","content":" Intro to R Markdown # "},{"id":3,"href":"/docs/setup/rsetup/","title":"Setting up R","section":"Setup and Basics","content":" R Setup # You may be wondering first, how do we actually install R? R does not naturally come preinstalled on your computer so you will have to install it. We will now go through some of the steps of getting R Setup on your computer. R comes in two different parts. First, there is the language itself (R). Then, there is the interface which allows you to type code (RStudio). In order to successfully complete this class, you will need both R and RStudio.\nDownloading and Installing R Link # You will have to choose the appropriate operating system. If you are using Ubuntu, there are special instructions if you want the newest version of R (v3.6.1 as of writing this document). This is mainly because of various kernel issues. To save time, you can also use the default which is to install an older version.\nThe link is found at the website above. Please download the right installer for your operating system (MacOS, Windows, Linux), and follow the onscreen prompts to install. You will not need to change any values during the installation process as the default values will suffice.\nDownloading and Installing R-Studio Link # This is different from R. R itself is a programming language. R-Studio is an Integrated Development Environment (IDE) which allows you to program with R interactively. It contains tools (such as shortcut buttons and syntax autocmpletion and highlighting) that make coding in R much easier. In addition to that, it allows you to create files, save functions, and alot more other features that will be useful in this class.\nThe link to download is also found at the website above. Please download the right installer for your operating system (MacOS, Windows, Linux), and follow the onscreen prompts to install. You will not need to change any values during the installation process as the default values will suffice.\nNavigating R # Whoa! After setting up and downloading R, you may be faced with alot of different choices and such a big screen. What do you do now? The largest most menu on the left is your console. This is where you can type commands in R to the computer and then get a result back. For example, try typing some basic commands such as 5 + 5 or 3 * 4. What do you get? This is sorta like your own little calculator here. We will cover alot more of the functionality of R-Studio as we go onto the semester.\nTODO: Add R Studio Files\nTODO: Running R Studio\nGetting Help in R # This is probably one of the most important things and is useful for any programming langauge, not only R; and that is \u0026ldquo;How do I get help in \u0026lt;Insert Language\u0026gt;\u0026rdquo;. There are three main ways to get help in R.\nUse Google. Simply put the topic you are confused about/need help with, into Google and you should recieve a plethora of resources regarding that. Using the help() method. What you can do is to call help() to see if there is a help page on it. For example, if I didn\u0026rsquo;t know what % is, I would type help(\u0026quot;%\u0026quot;) into the command prompt. RSeek.org is like Google, but for R. Enough Said. "},{"id":4,"href":"/docs/setup/types/","title":"Types and Variables","section":"Setup and Basics","content":" Types and Variables # We cover how types work in R and how you should be cognizant of them.\nWhat are Variables and Types? # In its essence, a type is something that defines what the data can be. Without further ado, lets dive into what a type is. Before we do that, let us cover what a variable is. A variable is something that stores a value of different types. For example, the different types are\nNumeric: a number such as 1,2,3,4\nString: These are words surrounded by quotation marks such as \u0026ldquo;hello\u0026rdquo;, \u0026ldquo;world\u0026rdquo;, \u0026ldquo;32\u0026rdquo;\nLogical: These are boolean variables which can be either TRUE or FALSE\nVector: A vector is a sequence of something that is the same type. Think of it as like a list or array. For example: these can be 1 2 3 4 or \u0026quot;hi\u0026quot; \u0026quot;this\u0026quot; \u0026quot;is\u0026quot; \u0026quot;stats\u0026quot;\nMatrix: A matrix is a rectangle of elements of the same type. You can think of it as a vector of vectors. For example:\n[xx] [,1] [,2] [xx] [,1] [,2] [1,] 1 3 or [1,] \u0026quot;hi\u0026quot; \u0026quot;hi\u0026quot; [2,] 2 4 [2,] \u0026quot;hi\u0026quot; \u0026quot;hi\u0026quot; List: A list is a vector but it allows different types. For example, a list can be 1, TRUE, \u0026quot;hello\u0026quot;\nAssigning and Using Variables # Now you know what a variable is, how can you actually use them and manipulate them. The most basic thing to know is that you assign variables with \u0026lt;-. Technically, you can also use = but only noobs do that. For example, if we want to assign x to the value of 7, we can do the following: x \u0026lt;- 7. If you want to see what is stored inside of x, you can type it into the command prompt and it should return 7.\nCreating variables is useful because it allows you to reuse those values over and over again inside the current session. You should also see the variable appear on your right-hand side variables\u0026rsquo; menu. In addition to that, you can also apply arithmatic operations to variables as you would do with numbers. For example, x + y, x * y are all valid operations. The same story can be said with strings and logicals such as z \u0026lt;- \u0026quot;I AM STRING\u0026quot; or x \u0026lt;- TRUE\nIn addition to that, variables are also case sensitive. The variables a thisVariable, ThisVariable and THISVariable are all different.\nTODO: DataFrame\n"},{"id":5,"href":"/docs/plots/advanced/","title":"Advanced Plotting","section":"Plotting and Visualization","content":" Advanced Plotting # "},{"id":6,"href":"/docs/setup/indexing/","title":"More on Vectors and Indexing","section":"Setup and Basics","content":" More on Vectors and Indexing # After learning more about types and variables, lets talk more about vectors and indexing inside of R.\nMore Vectors in R # Vectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw. When you write a single value in R, it becomes a vector of length 1 and belongs to one of the above types. Essentially, they are a list of items that are the same type.\nTo make a vector, you can use the c() function and seperate the items inside of the vector by a comma. For example, if we wanted to create a vector of restaurants in the UC area, we can do the following:\n\u0026gt; food \u0026lt;- c(\u0026quot;Cravings\u0026quot;, \u0026quot;Jerusalem\u0026quot;, \u0026quot;Sticky Rice\u0026quot;) \u0026gt; food [1] \u0026quot;Cravings\u0026quot; \u0026quot;Jerusalem\u0026quot; \u0026quot;Sticky Rice\u0026quot; If we wanted to create a vector with numerical values in a sequence, we can use the : operator. For example, if I wanted a vector with the numbers 1-10 in a vector, I can do the following:\n\u0026gt; coolNumbers \u0026lt;- 1:10 \u0026gt; coolNumbers [1] 1 2 3 4 5 6 7 8 9 10 Useful Vector Functions # If we wanted to see the amount of elements inside of the vector, we can use the length() function\n\u0026gt; food \u0026lt;- c(\u0026quot;Cravings\u0026quot;, \u0026quot;Jerusalem\u0026quot;, \u0026quot;Sticky Rice\u0026quot;) \u0026gt; length(food) [1] 3 Also, we can also sort a vector as well. Using strings, it goes alphabetically while numeric values are sorted ascending.\n\u0026gt; food \u0026lt;- c(\u0026quot;Cravings\u0026quot;, \u0026quot;Sticky Rice\u0026quot;, \u0026quot;Jerusalem\u0026quot;) \u0026gt; sort(food) [1] \u0026quot;Cravings\u0026quot; \u0026quot;Jerusalem\u0026quot; \u0026quot;Sticky Rice\u0026quot; \u0026gt; numbers \u0026lt;- c(1,4,5,2,3,8) \u0026gt; sort(numbers) [1] 1 2 3 4 5 8 Accessing Elements of Vectors # To access elements of vectors, you use this technique known as indexing which is utilizing []. For example, if I wanted to access the first element of vector, I would use [1]. Keep in mind that R uses 1-based indexing (arrays start at 1) while a majority of programming languages use 0-based indexing (arrays start at 0).\n\u0026gt; food \u0026lt;- c(\u0026quot;Cravings\u0026quot;, \u0026quot;Sticky Rice\u0026quot;, \u0026quot;Jerusalem\u0026quot;) \u0026gt; food[2] [1] \u0026quot;Sticky Rice\u0026quot; Repeating Vectors # Say if you wanted to repeat a sequence of vectors, you can use the rep() function. There are two variants of it. These are each and times. If we wanted to repeat each element a number of times consecutively, we would use each as the following:\n\u0026gt; numbers \u0026lt;- rep(c(1,2,3), each = 3) \u0026gt; numbers [1] 1 1 1 2 2 2 3 3 3 However, if wanted to string a sequence together an amount of times, we use times as following:\n\u0026gt; numbers \u0026lt;- rep(c(1,2,3), times = 3) \u0026gt; numbers [1] 1 2 3 1 2 3 1 2 3 "},{"id":7,"href":"/docs/setup/loops/","title":"Loops","section":"Setup and Basics","content":" Loops # R is perfect at performing repetitive tasks. Like wonderful. If you want an operation to be performed an amount of times, you use something we know as loops. By creating a loop, R will execute the commands inside the loop the amount of times specified.\nLoops are found in all programming languages, not only in R. They are a fundamental component of computers.\nFor Loop # The for loop is one of the most commonly used loop structures if you want to predefine the amount of times a block of code is run. The most basic example is\nfor (i in 1:4) { print(i) } [1] 1 [1] 2 [1] 3 [1] 4 Lets break this down. First we declare the for loop. Then, we declare the inner variable i. This is actually dynamic variable that changes upon each iteration of the loop. The statement i in 1:4 tells us to loop i through a sequence 1 to 4. If we were to do this manually, it would look like the following:\ni \u0026lt;- 1 print(i) i \u0026lt;- 2 print(i) i \u0026lt;- 3 print(i) i \u0026lt;- 4 print(i) We are not limited to just basic print operations however, we can also do more complex things. For example, if we wanted to loop through the elements of a vector and change an element, we can also do so:\nvec \u0026lt;- c(1,3,5,7,9) for(i in 1:length(vec)) { vec[i] \u0026lt;- vec[i] + 1 print(vec[i]) } This is a loop that goes through the elements of vec and adds 1 to them and prints it.\nWhile Loop # Another loop that you will use and encounter (not as much) is the while loop. It is used when you want to keep looping until a specific condition is reached. Plainly speaking, the loop follows English conventions as you have \u0026ldquo;while this condition is true, keep doing what I want you to do.\u0026rdquo; A simple example of the while loop can be found below:\ni \u0026lt;- 0 while (i \u0026lt;= 4) { i \u0026lt;- i + 1 print(i) } [1] 1 [1] 2 [1] 3 [1] 4 Here, the loop will continue to execute the body (code inside the loop) when i is less than or equal to 4. Once i is greater than 4, the loop will stop. In most cases, the for and while loops are sufficient for your every day purposes.\n"},{"id":8,"href":"/docs/setup/functions/","title":"Functions","section":"Setup and Basics","content":" Functions in R # We covered basics of R, how to create new variables, and other things. Now, we work on creating modular pieces of code, known as \u0026lsquo;functions\u0026rsquo; to reuse over and over again.\nIntroduction to Functions # We have already seen some functions in action. For example, c() creates a vector of elements inside. Other functions such as descriptive statistics methods (mean, median, mode, range) all have a method built in as well. For example:\nvec \u0026lt;- c(2, 3, 1, 6, 4, 3, 3, 7) mean(vec) [1] 3.625 var(vec) [2] 3.98214 sd(vec) [3] 1.995531 With the knowledge we accumulated earlier, if we wanted to use any of these values later, we can assign them to a value as well.\nmeanvec \u0026lt;- mean(vec) meanvec [1] 3.625 However, what about creating your own functions. The general format of creating your own functions is\nnameOfFunction \u0026lt;- function(argument 1, arugment2, ...) { expression 1 expression 2 ... } Once you run the above code, you are able to run your function regularly like nameOfFunction(argument 1, argument 2). That may seem a bit confusing, so lets run through an example. Say that we wanted to count the number of total elements in two vectors. We first provide the following function:\nsum_elements \u0026lt;- function(x,y) { temp = length(x) + length(y) return(temp) } We follow the original notation of declaring a function called sum_elements that takes in two arguments x and y. You may notice that there is a new function (or keyword) inside: return(). In fact, a return statement is not required for every function but it is in best practice to put one. Essentially, it tells you what to return. In the case of our function, it returns the value of temp.\n"},{"id":9,"href":"/docs/setup/logical/","title":"Conditionals and Logicals","section":"Setup and Basics","content":" Conditionals and Logicals # How do we be logical inside of R? For example, x + y does not imply any logic here, it just tells us to add things together. Conditional statements allow us to add logic into our functions, furthering making our functions better.\nLet us continue with an example. Say we want to return the predicted weather based on the current temperature in a function. We first provide the function below before going over it.\nweatherPredict \u0026lt;- function(temp) { if (temp \u0026gt;= 10 \u0026amp;\u0026amp; temp \u0026lt;= 35) { return(\u0026quot;snow\u0026quot;) } else if (temp \u0026gt; 35 \u0026amp;\u0026amp; temp \u0026lt;= 65) { return(\u0026quot;rain\u0026quot;) } else { return(\u0026quot;sun\u0026quot;) } } Here, we declare the same function declaration above where we make a function names weatherPredict which takes in one argument temp. Then, we use conditionals if in order to check conditionals. Generally, an if-else statement has the following syntax:\nif (condition) { code executed when condition is TRUE } else { code executed when condition is FALSE } "}]